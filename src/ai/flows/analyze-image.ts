// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Analyzes an image to identify dominant colors, objects, and overall mood.
 *
 * - analyzeImage - A function that handles the image analysis process.
 * - AnalyzeImageInput - The input type for the analyzeImage function.
 * - AnalyzeImageOutput - The return type for the analyzeImage function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AnalyzeImageInputSchema = z.object({
  photoUrl: z.string().describe('The URL of the photo to analyze.'),
});
export type AnalyzeImageInput = z.infer<typeof AnalyzeImageInputSchema>;

const AnalyzeImageOutputSchema = z.object({
  dominantColors: z.array(z.string()).describe('The dominant colors in the image.'),
  objects: z.array(z.string()).describe('The objects detected in the image.'),
  mood: z.string().describe('The overall mood of the image.'),
});
export type AnalyzeImageOutput = z.infer<typeof AnalyzeImageOutputSchema>;

export async function analyzeImage(input: AnalyzeImageInput): Promise<AnalyzeImageOutput> {
  return analyzeImageFlow(input);
}

const analyzeImagePrompt = ai.definePrompt({
  name: 'analyzeImagePrompt',
  input: {
    schema: z.object({
      photoUrl: z.string().describe('The URL of the photo to analyze.'),
    }),
  },
  output: {
    schema: z.object({
      dominantColors: z.array(z.string()).describe('The dominant colors in the image.'),
      objects: z.array(z.string()).describe('The objects detected in the image.'),
      mood: z.string().describe('The overall mood of the image.'),
    }),
  },
  prompt: `You are an AI expert in computer vision.

You will analyze the image at the provided URL and identify the dominant colors, objects, and overall mood of the image.

Return the dominant colors as an array of strings.
Return the objects detected as an array of strings.
Return the overall mood of the image as a string.

Photo URL: {{photoUrl}}`,
});

const analyzeImageFlow = ai.defineFlow<
  typeof AnalyzeImageInputSchema,
  typeof AnalyzeImageOutputSchema
>({
  name: 'analyzeImageFlow',
  inputSchema: AnalyzeImageInputSchema,
  outputSchema: AnalyzeImageOutputSchema,
}, async input => {
  const {output} = await analyzeImagePrompt(input);
  return output!;
});
